#!/usr/bin/env python3

import os
import os.path as path
import sys
import time

BIN_DIR = path.abspath(path.dirname(__file__))
GIT_DIR = path.split(BIN_DIR)[0]
TIME_DIR = path.join(GIT_DIR, "implementations", "timing")
KERN_DIR = path.join(TIME_DIR, "kern")
KERN_MAIN_DIR = path.join(TIME_DIR, "kern_main")
SRC_DIR = path.join(GIT_DIR, "src")
GEL_DIR = path.join(GIT_DIR, "requirements", "gelpia", "bin")
sys.path.append(GEL_DIR)
sys.path.append(SRC_DIR)

path_addition = path.join(GIT_DIR, "requirements", "FPTaylor")
current = os.environ["PATH"]
os.environ["PATH"] = "{}:{}".format(path_addition, current)


import fractions
import gelpia_interface
import json
import argparse
import fpcore
import fptaylor
import ast_modifications.all_modifications
import accuracy_specification
import z3

from utils import Timer, Logger

logger = Logger(level=Logger.MEDIUM, color=Logger.green)
timer = Timer()


def parse_args(argv):
    arg_parser = argparse.ArgumentParser(description="Floating point selector")
    arg_parser.add_argument("query_files",
                            type=str,
                            nargs="+",
                            help="Files containing the target FPCore(s)")
    arg_parser.add_argument("-v", "--verbosity",
                            nargs="?",
                            default="low",
                            const="medium",
                            choices=list(Logger.CONSTANT_DICT),
                            help="Set output verbosity")
    arg_parser.add_argument("-l", "--log-file",
                            nargs="?",
                            type=str,
                            help="Redirect logging to given file.")
    arg_parser.add_argument("-a", "--accuracy-specs",
                            nargs="?",
                            type=str,
                            default=path.join(GIT_DIR, "implementations", "all_specifications.json"),
                            help="File containing function accuracy specifications")
    arg_parser.add_argument("-c", "--costs",
                            nargs="?",
                            type=str,
                            default=path.join(GIT_DIR, "implementations", "all_costs.json"),
                            help="File containing function costs")
    # arg_parser.add_argument("--nightly",
    #                         action="store_const",
    #                         const=True,
    #                         help="Output in html format, set verbosity to none")

    args = arg_parser.parse_args(argv[1:])

    # Set Log level
    Logger.set_log_level(Logger.str_to_level(args.verbosity))

    # # Send to stderr if nightly, otherwise check for logfile
    # if args.nightly:
    #     Logger.send_log_to_stderr()
    if args.log_file is not None:
        Logger.set_log_filename(args.log_file)

    logger("Argument settings:")
    logger("  query_files: {}", args.query_files)
    logger("    verbosity: {}", args.verbosity)
    logger("     log_file: {}", args.log_file)

    return args


def max_forms(fpc, e):
    e.maximums = dict()
    for wrt in e.forms:
        e.maximums[wrt] = dict()
        for k,v in e.forms[wrt].items():
            query = fpc.to_gelpia(v[1])
            res = gelpia_interface.Result(query)
            e.maximums[wrt][k] = res.abs_max

def number_to_z3(n):
    frac = fractions.Fraction(n)
    if frac.denominator == 1:
        return "{}".format(frac.numerator)
    return "(/ {} {})".format(frac.numerator, frac.denominator)


def select_options(fpc, e, implementations):
    if (type(e) != fpcore.Operation
        or e.op not in implementations):
        return
    possible = implementations[e.op]
    e.domain = fpc.dynamic_range(e.args[0])
    possible = [a for a in possible
                if a.domain[0] <= e.domain[0] and a.domain[1] >= e.domain[1]]
    e.possible_ids = [a.id for a in possible]
    arg = e.args[0]
    fptaylor_query = fpc.to_fptaylor(arg)
    fptaylor_res = fptaylor.Result(fptaylor_query,
                                   config=fptaylor.ERROR_FORM_CONFIG)
    fpc.match_fptaylor_forms(fptaylor_res)


def generate_z3_impl_bools(e, lines):
    if not hasattr(e, "possible_ids"):
        return
    lines.append("; implementations for {} = {}".format(e.name, e))
    bool_names = list()
    for id in e.possible_ids:
        bool_name = "{}_is_{}".format(e.name, id)
        bool_names.append(bool_name)
        line = "(declare-const {} Bool)".format(bool_name)
        lines.append(line)
    converted = ["(btoi {})".format(n) for n in bool_names]
    sum_parts = "\n  ".join(converted)
    assertion = "(assert (= 1 (+\n  {})))".format(sum_parts)
    lines.append(assertion)
    lines.append("")

def generate_z3_epsilons(e, lines, id_mapped_implementations):
    if not hasattr(e, "possible_ids"):
        epsilons = list()
        for wrt, d in e.forms.items():
            if "epsilon" in d:
                epsilons.append(d["epsilon"][0])
        if len(epsilons) == 0:
            return
        assert(len(set(epsilons)) == 1)
        eps = epsilons[0]
        e.epsilon = number_to_z3(2**int(eps))
        return
    epsilon_name = "epsilon_for_{}".format(e.name)
    lines.append("; epsilon for {} = {}".format(e.name, e))
    parts = list()
    for id in e.possible_ids:
        bool_name = "{}_is_{}".format(e.name, id)
        eps_val = id_mapped_implementations[id].epsilon
        parts.append("(* (btor {}) {})".format(bool_name, number_to_z3(eps_val)))
    sum_parts = "\n  ".join(parts)
    assignment = "(define-fun {} () Real (+\n  {}))".format(epsilon_name, sum_parts)
    lines.append(assignment)
    lines.append("")
    e.epsilon = epsilon_name

def generate_z3_deltas(e, lines, id_mapped_implementations):
    if not hasattr(e, "possible_ids"):
        deltas = list()
        for wrt, d in e.forms.items():
            if "delta" in d:
                deltas.append(d["delta"][0])
        if len(deltas) == 0:
            return
        assert(len(set(deltas)) == 1)
        delt = deltas[0]
        e.delta = number_to_z3(2**int(delt))
        return
    delta_name = "delta_for_{}".format(e.name)
    lines.append("; delta for {} = {}".format(e.name, e))
    parts = list()
    for id in e.possible_ids:
        bool_name = "{}_is_{}".format(e.name, id)
        delt_val = id_mapped_implementations[id].delta
        parts.append("(* (btor {}) {})".format(bool_name, number_to_z3(delt_val)))
    sum_parts = "\n  ".join(parts)
    assignment = "(define-fun {} () Real (+\n  {}))".format(delta_name, sum_parts)
    lines.append(assignment)
    lines.append("")
    e.delta = delta_name

def generate_z3_costs(e, lines, costs, id_mapped_implementations):
    if not hasattr(e, "possible_ids"):
        return
    cost_name = "cost_for_{}".format(e.name)
    lines.append("; cost for {} = {}".format(e.name, e))
    parts = list()
    for id in e.possible_ids:
        bool_name = "{}_is_{}".format(e.name, id)
        cost = id_mapped_implementations[id].cost
        parts.append("(* (btor {}) {})".format(bool_name, cost))
    sum_parts = "\n  ".join(parts)
    assignment = "(define-fun {} () Real (+\n  {}))".format(cost_name, sum_parts)
    lines.append(assignment)
    lines.append("")
    costs.append(cost_name)

def generate_z3_error(fpc, wrt, lines):
    def sum_error_components(e, wrt, lines, parts):
        if wrt.name not in e.maximums:
            return

        my_error_name = "error_from_{}_wrt_{}".format(e.name, wrt.name)

        if ("epsilon" in e.maximums[wrt.name]
            and "delta" in e.maximums[wrt.name]):
            my_epsilon = e.epsilon
            my_delta = e.delta
            my_eps_mul = number_to_z3(e.maximums[wrt.name]["epsilon"])
            my_del_mul = number_to_z3(e.maximums[wrt.name]["delta"])
            line = "(define-fun {} () Real\n  (+ (* {} {}) (* {} {})))".format(my_error_name,
                                                                                 my_epsilon,
                                                                                 my_eps_mul,
                                                                                 my_delta,
                                                                                 my_del_mul)
        elif ("epsilon" in e.maximums[wrt.name]
              and "delta" not in e.maximums[wrt.name]):
            my_epsilon = e.epsilon
            my_eps_mul = number_to_z3(e.maximums[wrt.name]["epsilon"])
            line = "(define-fun {} () Real\n  (* {} {}))".format(my_error_name,
                                                                 my_epsilon,
                                                                 my_eps_mul)
        elif ("epsilon" not in e.maximums[wrt.name]
              and "delta" in e.maximums[wrt.name]):
            my_delta = e.delta
            my_del_mul = number_to_z3(e.maximums[wrt.name]["delta"])
            line = "(define-fun {} () Real\n  (* {} {}))".format(my_error_name,
                                                                 my_delta,
                                                                 my_del_mul)
        else:
            return

        lines.append(line)
        parts.append(my_error_name)

    error_name = "total_error_for_{}".format(wrt.name)
    lines.append("; total error for {} = {}".format(wrt.name, wrt))
    parts = list()
    fpc.for_each(lambda e: sum_error_components(e, wrt, lines, parts))
    sum_parts = "\n  ".join(parts)
    assignment = "(define-fun {} () Real (+\n  {}))".format(error_name, sum_parts)
    lines.append(assignment)
    lines.append("")
    return error_name

def generate_z3_domain_error(fpc, e, lines):
    if not hasattr(e, "possible_ids"):
        return
    arg = e.args[0]
    e.domain_error = generate_z3_error(fpc, arg, lines)

def generate_z3_domain_bounding(fpc, e, lines, id_mapped_implementations):
    if not hasattr(e, "possible_ids"):
        return
    arg = e.args[0]
    real_domain = fpc.dynamic_range(arg)
    for id in e.possible_ids:
        impl = id_mapped_implementations[id]
        lower_gap = real_domain[0] - impl.domain[0]
        upper_gap = impl.domain[1] - real_domain[1]
        min_gap = min(lower_gap, upper_gap)
        boolean = "{}_is_{}".format(e.name, id)
        assertion = "(assert (=> {} (<= {} {})))".format(boolean, e.domain_error, number_to_z3(min_gap))
        lines.append(assertion)
    lines.append("")

def z3_comment_banner(message, lines):
    max_len = 80 - 4 - 2
    space_len = max_len - len(message)
    lines.append("; +"+"-"*76+"+")
    lines.append("; + "+message+" "*space_len + " +")
    lines.append("; +"+"-"*76+"+")

def extract_fpcore_name(fpc):
    for p in fpc.properties:
        if p.name.source == "name":
            name = p.value
            name = name.replace(" ", "_")
            name = name.replace("\"", "")
            name = name.replace(".", "_")
            name = name.replace("$", "_")
            name = name.replace("-", "_")
            name = name.replace(":", "_")
            name = name.replace(",", "_")
            name = name.replace("__", "_")
            fpc.name = name
            return

def main(argv):
    args = parse_args(argv)

    accuracy_specs = accuracy_specification.read_file(args.accuracy_specs)

    with open(args.costs, "r") as f:
        data = f.read()
    costs = json.loads(data)

    for A in accuracy_specs:
        cname = A.cname
        A.set_cost(costs[cname])

    functions = set(a.operation for a in accuracy_specs)
    implementations = {f:list() for f in functions}
    id_mapped_implementations = dict()
    for A in accuracy_specs:
        implementations[A.operation].append(A)
    for f in functions:
        idx = 0
        for A in implementations[f]:
            A.id = "{}_{}".format(f, idx)
            id_mapped_implementations[A.id] = A
            idx += 1

    fpcores = list()
    for query_file in args.query_files:
        try:
            with open(query_file, "r") as f:
                text = f.read()

        except FileNotFoundError:
            logger.error("Unable to find file '{}'", query_file)
            continue

        this_fpcores = fpcore.parse(text)

        if len(this_fpcores) == 0:
            logger.error("No FPCore found in file '{}'", query_file)
            continue

        fpcores.extend(this_fpcores)

    for fpc in fpcores:
        logger.blog("Processing", fpc)

        fpc.remove_let()
        fpc.reject_unsupported()
        fpc.extract_input_domains()
        fpc.set_name()
        extract_fpcore_name(fpc)
        logger.blog("Converted", fpc.pretty_internals())

        fptaylor_query = fpc.to_fptaylor()
        fptaylor_res = fptaylor.Result(fptaylor_query,
                                       config=fptaylor.ERROR_FORM_CONFIG)
        fpc.match_fptaylor_forms(fptaylor_res)
        logger.blog("Matched", fpc.pretty_internals())

        fpc.for_each(lambda e: select_options(fpc, e, implementations))
        logger.blog("Optioned", fpc.pretty_internals())

        fpc.for_each(lambda e: max_forms(fpc, e))
        logger.blog("Maxed", fpc.pretty_internals())

        lines = [
            "; +"+"-"*76+"+",
            "; + Utility functions"+" "*58+"+",
            "; +"+"-"*76+"+",
            "(define-fun btoi ((b Bool)) Int",
            "  (ite b 1 0))",
            "",
            "(define-fun btor ((b Bool)) Real",
            "  (ite b 1.0 0.0))",
            "",
            ]
        z3_comment_banner("Implementation choices", lines)
        fpc.for_each(lambda e: generate_z3_impl_bools(e, lines))

        z3_comment_banner("Epsilons", lines)
        fpc.for_each(lambda e: generate_z3_epsilons(e, lines, id_mapped_implementations))

        z3_comment_banner("Deltas", lines)
        fpc.for_each(lambda e: generate_z3_deltas(e, lines, id_mapped_implementations))

        z3_comment_banner("Domain errors", lines)
        fpc.for_each(lambda e: generate_z3_domain_error(fpc, e, lines))

        z3_comment_banner("Domain bounding", lines)
        fpc.for_each(lambda e: generate_z3_domain_bounding(fpc, e, lines, id_mapped_implementations))

        z3_comment_banner("Top level error", lines)
        top_level_error = generate_z3_error(fpc, fpc.expression, lines)
        lines.append("(declare-const total_error Real)")
        lines.append("(assert (= total_error {}))".format(top_level_error))

        costs = list()
        z3_comment_banner("Costs", lines)
        fpc.for_each(lambda e: generate_z3_costs(e, lines, costs, id_mapped_implementations))
        sum_parts = "\n  ".join(costs)
        lines.append("(declare-const total_cost Real)")
        lines.append("(assert (= total_cost (+\n  {})))".format(sum_parts))

        lines.append("(minimize total_error)")
        lines.append("(minimize total_cost)")
        lines.append("(set-option :opt.priority pareto)")
        lines.append("(check_sat)")

        functions = list()

        ctx = z3.Context("model_validate", "true")
        z3_query = "\n".join(lines)
        logger.blog("Z3 Query", z3_query)
        optimizer = z3.Optimize(ctx=ctx)
        optimizer.from_string(z3_query)
        while True:
            state = optimizer.check()
            if str(state) != "sat":
                break
            z3_model = optimizer.model()
            model = {d.name(): z3_model[d] for d in z3_model}
            choices = {k for k,v in model.items() if (k != "total_error" and k != "total_cost") and v == True}
            raw_assignment = {name.split("_is_")[0]: name.split("_is_")[1] for name in choices}
            assignment = {k: id_mapped_implementations[v] for k,v in raw_assignment.items()}

            try:
                fpt_query = fpc.to_fptaylor(fpc.expression, assignment)
                fpt_res = fptaylor.Result(fpt_query, fptaylor.CHECK_CONFIG)
                error = float(fpt_res.result["absolute_errors"]["final_total"]["value"])
                model_error = float(fractions.Fraction(str(model["total_error"])))
                cost = float(fractions.Fraction(str(model["total_cost"])))
                print("{}\t{}\t{}".format(cost, model_error, error))
                functions.append({"error": error,
                                  "assignment": assignment,
                                  "cost": cost})
            except Exception:
                pass

        functions.sort(key=lambda f: f["error"])
        h_name = "{}.h".format(fpc.name)
        c_name = "{}.c".format(fpc.name)
        time_c_name = "time_{}.c".format(fpc.name)
        h_lines = ['#include "glibc_functions.h"',
                   '#include "metalibm_functions.h"',
                   '#include "mpfr_functions.h"',
                   '\n',]
        c_lines = ['#include "{}"'.format(h_name),
                   '\n']
        time_c_lines = ['#include "time_func.h"',
                        '#include "{}"'.format(h_name),
                        '#define ENTRY_COUNT ({})'.format(len(functions)),
                        'double lows[{}] = {{{}}};'.format(len(fpc.domains), ",".join(str(d[0]) for d in fpc.domains.values())),
                        'double highs[{}] = {{{}}};'.format(len(fpc.domains), ",".join(str(d[1]) for d in fpc.domains.values())),
                        'entry ENTRIES[ENTRY_COUNT] = {']

        for i, func in enumerate(functions):
            function_name = "{}_{}".format(fpc.name, i)
            body = fpc.to_c(function_name, fpc.expression, func["assignment"])
            h_lines.append(body.splitlines()[0]+";")
            c_lines.append(body)
            time_c_lines.append('{{ {}, {}, "{}", lows, highs, {} }},'.format(function_name, len(fpc.domains), function_name, func["error"]))

        time_c_lines.extend(['};',
                             'int main(int argc, char** argv)',
                             '{',
                             'process_entries(argc, argv, ENTRY_COUNT, ENTRIES);',
                             '}'])

        if not path.isdir(KERN_DIR):
            os.mkdir(KERN_DIR)

        if not path.isdir(KERN_MAIN_DIR):
            os.mkdir(KERN_MAIN_DIR)
        
        with open(path.join(KERN_DIR, h_name), "w") as f:
            f.write("\n".join(h_lines))

        with open(path.join(KERN_DIR, c_name), "w") as f:
            f.write("\n".join(c_lines))

        with open(path.join(KERN_MAIN_DIR, time_c_name), "w") as f:
            f.write("\n".join(time_c_lines))




if __name__ == "__main__":
    timer.start()
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        retval = 1
    timer.stop()
    logger("Total time: {}", timer.elapsed())
    sys.exit(retval)
