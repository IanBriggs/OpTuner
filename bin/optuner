#!/usr/bin/env python3

import os
import os.path as path
import sys
import time

BIN_DIR = path.abspath(path.dirname(__file__))
GIT_DIR = path.split(BIN_DIR)[0]
TIME_DIR = path.join(GIT_DIR, "implementations", "timing")
KERN_DIR = path.join(TIME_DIR, "kern")
KERN_MAIN_DIR = path.join(TIME_DIR, "kern_main")
SRC_DIR = path.join(GIT_DIR, "src")
GEL_DIR = path.join(GIT_DIR, "requirements", "gelpia", "bin")
sys.path.append(GEL_DIR)
sys.path.append(SRC_DIR)

path_addition = path.join(GIT_DIR, "requirements", "FPTaylor")
current = os.environ["PATH"]
os.environ["PATH"] = "{}:{}".format(path_addition, current)


import fractions
import gelpia_interface
import json
import argparse
import fpcore
import fptaylor
import ast_modifications.all_modifications
import accuracy_specification
import z3

from utils import Timer, Logger

logger = Logger(level=Logger.MEDIUM, color=Logger.green)
timer = Timer()


def parse_args(argv):
    arg_parser = argparse.ArgumentParser(description="Floating point selector")
    arg_parser.add_argument("query_files",
                            type=str,
                            nargs="+",
                            help="Files containing the target FPCore(s)")
    arg_parser.add_argument("-v", "--verbosity",
                            nargs="?",
                            default="low",
                            const="medium",
                            choices=list(Logger.CONSTANT_DICT),
                            help="Set output verbosity")
    arg_parser.add_argument("-l", "--log-file",
                            nargs="?",
                            type=str,
                            help="Redirect logging to given file.")
    arg_parser.add_argument("-a", "--accuracy-specs",
                            nargs="?",
                            type=str,
                            default=path.join(GIT_DIR, "implementations", "all_specifications.json"),
                            help="File containing function accuracy specifications")
    arg_parser.add_argument("-c", "--costs",
                            nargs="?",
                            type=str,
                            default=path.join(GIT_DIR, "implementations", "all_costs.json"),
                            help="File containing function costs")

    args = arg_parser.parse_args(argv[1:])

    # Set Log level
    Logger.set_log_level(Logger.str_to_level(args.verbosity))

    if args.log_file is not None:
        Logger.set_log_filename(args.log_file)

    logger("Argument settings:")
    logger("  query_files: {}", args.query_files)
    logger("    verbosity: {}", args.verbosity)
    logger("     log_file: {}", args.log_file)

    return args


def max_forms(fpc, e):
    e.maximums = dict()
    for wrt in e.forms:
        e.maximums[wrt] = dict()
        for k,v in e.forms[wrt].items():
            query = fpc.to_gelpia(v[1])
            res = gelpia_interface.Result(query)
            e.maximums[wrt][k] = res.abs_max


def select_options(fpc, e, implementations):
    if (type(e) != fpcore.Operation
        or e.op not in implementations):
        return
    possible = implementations[e.op]
    e.domain = fpc.dynamic_range(e.args[0])
    possible = [a for a in possible
                if a.domain[0] <= e.domain[0] and a.domain[1] >= e.domain[1]]
    e.possible_ids = [a.id for a in possible]
    arg = e.args[0]
    fptaylor_query = fpc.to_fptaylor(arg)
    fptaylor_res = fptaylor.Result(fptaylor_query,
                                   config=fptaylor.ERROR_FORM_CONFIG)
    fpc.match_fptaylor_forms(fptaylor_res)


def extract_fpcore_name(fpc):
    for p in fpc.properties:
        if p.name.source == "name":
            name = p.value
            name = name.replace(" ", "_")
            name = name.replace("\"", "")
            name = name.replace(".", "_")
            name = name.replace("$", "_")
            name = name.replace("-", "_")
            name = name.replace(":", "_")
            name = name.replace(",", "_")
            name = name.replace("__", "_")
            fpc.name = name
            return

def main(argv):
    args = parse_args(argv)

    accuracy_specs = accuracy_specification.read_file(args.accuracy_specs)

    with open(args.costs, "r") as f:
        data = f.read()
    costs = json.loads(data)

    for A in accuracy_specs:
        cname = A.cname
        A.set_cost(costs[cname])

    functions = set(a.operation for a in accuracy_specs)
    implementations = {f:list() for f in functions}
    id_mapped_implementations = dict()
    for A in accuracy_specs:
        implementations[A.operation].append(A)
    for f in functions:
        idx = 0
        for A in implementations[f]:
            A.id = "{}_{}".format(f, idx)
            id_mapped_implementations[A.id] = A
            idx += 1

    fpcores = list()
    for query_file in args.query_files:
        try:
            with open(query_file, "r") as f:
                text = f.read()

        except FileNotFoundError:
            logger.error("Unable to find file '{}'", query_file)
            continue

        this_fpcores = fpcore.parse(text)

        if len(this_fpcores) == 0:
            logger.error("No FPCore found in file '{}'", query_file)
            continue

        fpcores.extend(this_fpcores)

    for fpc in fpcores:
        logger.blog("Processing", fpc)

        fpc.remove_let()
        fpc.reject_unsupported()
        fpc.extract_input_domains()
        fpc.set_name()
        extract_fpcore_name(fpc)
        logger.blog("Converted", fpc.pretty_internals())

        fptaylor_query = fpc.to_fptaylor()
        fptaylor_res = fptaylor.Result(fptaylor_query,
                                       config=fptaylor.ERROR_FORM_CONFIG)
        fpc.match_fptaylor_forms(fptaylor_res)
        logger.blog("Matched", fpc.pretty_internals())

        fpc.for_each(lambda e: select_options(fpc, e, implementations))
        logger.blog("Optioned", fpc.pretty_internals())

        fpc.for_each(lambda e: max_forms(fpc, e))
        logger.blog("Maxed", fpc.pretty_internals())

        z3_query = fpc.to_z3(id_mapped_implementations)
        logger.blog("Z3 Query", z3_query)

        functions = list()
        ctx = z3.Context("model_validate", "true")
        optimizer = z3.Optimize(ctx=ctx)
        optimizer.from_string(z3_query)
        while True:
            state = optimizer.check()
            if str(state) != "sat":
                break
            z3_model = optimizer.model()
            model = {d.name(): z3_model[d] for d in z3_model}
            choices = {k for k,v in model.items() if (k != "total_error" and k != "total_cost") and v == True}
            raw_assignment = {name.split("_is_")[0]: name.split("_is_")[1] for name in choices}
            assignment = {k: id_mapped_implementations[v] for k,v in raw_assignment.items()}

            try:
                fpt_query = fpc.to_fptaylor(fpc.expression, assignment)
                fpt_res = fptaylor.Result(fpt_query, fptaylor.CHECK_CONFIG)
                error = float(fpt_res.result["absolute_errors"]["final_total"]["value"])
                model_error = float(fractions.Fraction(str(model["total_error"])))
                cost = float(fractions.Fraction(str(model["total_cost"])))
                print("{}\t{}\t{}".format(cost, model_error, error))
                functions.append({"error": error,
                                  "assignment": assignment,
                                  "cost": cost})
            except Exception:
                pass

        functions.sort(key=lambda f: f["error"])
        for i, func in enumerate(functions):
            function_name = "{}_{}".format(fpc.name, i)
            functions[i]["cname"] = function_name

        glibc_assignment = dict()
        for k,v in assignment.items():
            op = v.operation
            glibcname = "{}_glibc".format(op)
            found = False
            for A in implementations[op]:
                if A.cname == glibcname:
                    glibc_assignment[k] = A
                    found = True
                    break
            if not found:
                logger.error("Unable to find glibc function: {}", glibcname)
                sys.exit(2)

        try:
            fpt_query = fpc.to_fptaylor(fpc.expression, glibc_assignment)
            fpt_res = fptaylor.Result(fpt_query, fptaylor.CHECK_CONFIG)
            error = float(fpt_res.result["absolute_errors"]["final_total"]["value"])
            model_error = float(fractions.Fraction(str(model["total_error"])))
            cost = float(fractions.Fraction(str(model["total_cost"])))
            print("{}\t{}\t{}".format(cost, model_error, error))
            functions.append({"error": error,
                              "assignment": glibc_assignment,
                              "cost": cost,
                              "cname": "{}_glibc".format(fpc.name)})
        except Exception:
            pass

        if fpc.name == "povray_photons":
            povray_assignment = dict()
            for k,v in assignment.items():
                op = v.operation
                povcname = "{}_povray".format(op)
                found = False
                for A in implementations[op]:
                    if A.cname == povcname:
                        povray_assignment[k] = A
                        found = True
                        break
                if not found:
                    logger.error("Unable to find povray function: {}", glibcname)
                    sys.exit(2)

            try:
                fpt_query = fpc.to_fptaylor(fpc.expression, povray_assignment)
                fpt_res = fptaylor.Result(fpt_query, fptaylor.CHECK_CONFIG)
                error = float(fpt_res.result["absolute_errors"]["final_total"]["value"])
                model_error = float(fractions.Fraction(str(model["total_error"])))
                cost = float(fractions.Fraction(str(model["total_cost"])))
                print("{}\t{}\t{}".format(cost, model_error, error))
                functions.append({"error": error,
                                  "assignment": povray_assignment,
                                  "cost": cost,
                                  "cname": "{}_povray".format(fpc.name)})
            except Exception:
                pass


        h_name = "{}.h".format(fpc.name)
        c_name = "{}.c".format(fpc.name)
        time_c_name = "time_{}.c".format(fpc.name)
        h_lines = ['#include "all_functions.h"',
                   '\n',]
        c_lines = ['#include "{}"'.format(h_name),
                   '\n']
        time_c_lines = ['#include "time_func.h"',
                        '#include "{}"'.format(h_name),
                        '#define ENTRY_COUNT ({})'.format(len(functions)),
                        'double lows[{}] = {{{}}};'.format(len(fpc.domains), ",".join(str(d[0]) for d in fpc.domains.values())),
                        'double highs[{}] = {{{}}};'.format(len(fpc.domains), ",".join(str(d[1]) for d in fpc.domains.values())),
                        'entry ENTRIES[ENTRY_COUNT] = {']

        for func in functions:
            function_name = func["cname"]
            body = fpc.to_c(function_name, fpc.expression, func["assignment"])
            h_lines.append(body.splitlines()[0]+";")
            c_lines.append(body)
            time_c_lines.append('{{ {}, {}, "{}", lows, highs, {} }},'.format(function_name, len(fpc.domains), function_name, func["error"]))

        time_c_lines.extend(['};',
                             'int main(int argc, char** argv)',
                             '{',
                             'process_entries(argc, argv, ENTRY_COUNT, ENTRIES);',
                             '}'])

        if not path.isdir(KERN_DIR):
            os.mkdir(KERN_DIR)

        if not path.isdir(KERN_MAIN_DIR):
            os.mkdir(KERN_MAIN_DIR)

        with open(path.join(KERN_DIR, h_name), "w") as f:
            f.write("\n".join(h_lines))

        with open(path.join(KERN_DIR, c_name), "w") as f:
            f.write("\n".join(c_lines))

        with open(path.join(KERN_MAIN_DIR, time_c_name), "w") as f:
            f.write("\n".join(time_c_lines))




if __name__ == "__main__":
    timer.start()
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        retval = 1
    timer.stop()
    logger("Total time: {}", timer.elapsed())
    sys.exit(retval)
