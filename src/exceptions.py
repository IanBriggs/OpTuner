

class OpTunerError(Exception):
    pass


class FeatureError(OpTunerError):
    """
    Indicates that a language feature was used that has not yet been
    implemented
    """
    def __init__(self, feature_name):
        self.feature_name = feature_name


class VariableError(OpTunerError):
    """
    Indicates that a variable was used without a definition being given first
    """
    def __init__(self, name):
        self.name = name


class OperationError(OpTunerError):
    """ Indicates that a currently unsupported operation was used """
    def __init__(self, oper):
        self.oper = oper


class UnsupportedError(OpTunerError):
    """ Indicates usage of an unsuported FPCore statement type """
    def __init__(self, statement_type):
        self.statement_type = statement_type


class NoPreError(OpTunerError):
    """ Indicates that no ':pre' property was present in an FPCore """
    pass


class BadPreError(OpTunerError):
    """ Indicates that the given ':pre' was unable to be proccesed """
    def __init__(self, pre):
        self.pre = str(pre)


class DomainError(OpTunerError):
    """ Indicates that an input to an FPCore does not have a full domain """
    def __init__(self, lower, upper, name):
        self.lower = lower
        self.upper = upper
        self.name = name


class NameClashError(OpTunerError):
    """ Indicates that an autogenerated name overlapped with an existing
    name """
    def __init__(self, name):
        self.name = name


class SingleOperationError(OpTunerError):
    """
    Indicates that more than a single operation was added as a
    SingleAssignment subexpression
    """
    def __init__(self, value):
        self.value = str(value)


class FPTaylorMatchError(OpTunerError):
    """
    Indicates that matching FPTaylor forms with the SingleAssignment
    definitions failed
    """
    def __init__(self, unmatched):
        self.unamtched = unmatched


class FPTaylorMatchOneError(FPTaylorMatchError):
    """
    Indicates that matching FPTaylor forms failed where one form was
    intended to be unmatched
    """
    pass


class UnreachableError(OpTunerError):
    """
    Indicates that the corresponding code path was thought to be
    unreachable
    """
    pass


class FPTaylorRuntimeError(OpTunerError):
    """ Indicates that the FPTaylor command line failed to run """
    def __init__(self, query, command, out, err, retcode):
        self.query = query
        self.command = command
        self.out = out
        self.err = err
        self.retcode = retcode


class FPTaylorFormError(OpTunerError):
    """
    Indicates that the forms and corrsponding original expressions parsed
    from FPTaylor's output do not match in length
    """
    def __init__(self, out, forms, originals):
        self.out = out
        self.forms = forms
        self.originals = originals


class FPTaylorLexError(OpTunerError):
    """
    Indicates a lexing error for the FPTaylor Parser
    """
    def __init__(self, lineno, tok):
        self.lineno = lineno
        self.tok = tok


class FPTaylorParseError(OpTunerError):
    """ Indicates a parsing error for the FPTaylor Parser """
    def __init__(self, p):
        self.p = p


class GelpiaInfError(OpTunerError):
    """ Indicates that Gelpia returned an infinite value """
    def __init__(self, query):
        self.query = query
